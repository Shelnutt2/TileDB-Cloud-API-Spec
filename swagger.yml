swagger: "2.0"
info:
  description: TileDB Storage Platform REST API
  title: Tiledb Storage Platform API
  version: 0.0.3

produces:
- application/json
consumes:
- application/json
schemes:
- https

basePath: /v1

securityDefinitions:
  BasicAuth:
    type: basic
  ApiKeyAuth:
    type: apiKey
    in: header
    name: X-TBDSP-API-Key

definitions:
  ArrayType:
    description: TileDB array type
    type: string
    enum: &ARRAYTYPE
      # Dense array
      - dense
      # Sparse array
      - sparse
  Datatype:
    description: TileDB data type
    type: string
    enum: &DATATYPE
      # 32-bit signed integer
      - INT32
      # 64-bit signed integer
      - INT64
      # 32-bit floating point value
      - FLOAT32
      # 64-bit floating point value
      - FLOAT64
      # Character
      - CHAR
      # 8-bit signed integer
      - INT8
      # 8-bit unsigned integer
      - UINT8
      # 16-bit signed integer
      - INT16
      # 16-bit unsigned integer
      - UINT16
      # 32-bit unsigned integer
      - UINT32
      # 64-bit unsigned integer
      - UINT64
      # ASCII string
      - STRING_ASCII
      # UTF-8 string
      - STRING_UTF8
      # UTF-16 string
      - STRING_UTF16
      # UTF-32 string
      - STRING_UTF32
      # UCS2 string
      - STRING_UCS2
      # UCS4 string
      - STRING_UCS4
      # This can be any datatype. Must store (type tag, value) pairs.
      - ANY
  Layout:
    description: Layout of array
    type: string
    enum: &LAYOUT
      # Row-major layout
      - row-major
      # Column-major layout
      - col-major
      # Global-order layout
      - global-order
      # Unordered layout
      - unordered
  Querytype:
    description: Type of query
    type: string
    enum: &QUERYTYPE
      # READ
      - READ
      # Write
      - WRITE
  Querystatus:
    description: STatus of query
    type: string
    enum: &QUERYSTATUS
      # FAILED
      - FAILED
      # COMPLETED
      - COMPLETED
      # INPROGRESS
      - INPROGRESS
      # INCOMPLETE
      - INCOMPLETE
      # UNINITIALIZED
      - UNINITIALIZED
  Compressor:
    description: TileDB compressor setting
    type: string
    enum: &COMPRESSOR
      # No compressor
      - NO_COMPRESSION
      # Gzip compressor
      - GZIP
      # Zstandard compressor
      - ZSTD
      # LZ4 compressor
      - LZ4
      # Blosc compressor using LZ
      - BLOSC_LZ
      # Blosc compressor using LZ4
      - BLOSC_LZ4
      # Blosc compressor using LZ4HC
      - BLOSC_LZ4HC
      # Blosc compressor using Snappy
      - BLOSC_SNAPPY
      # Blosc compressor using zlib
      - BLOSC_ZLIB
      # Blosc compressor using Zstandard
      - BLOSC_ZSTD
      # Run-length encoding compressor
      - RLE
      # Bzip2 compressor
      - BZIP2
      # Double-delta compressor
      - DOUBLE_DELTA
  Attribute:
    description: Attribute of array
    type: object
    required:
      - name
      - type
      - compressor
      - compressor_level
      - cell_val_num
    properties:
      name:
        description: Attribute name
        type: string
        example: attribute1
      type:
        description: TileDB attribute datatype
        type: string
        enum: *DATATYPE
        example: "INT32"
      compressor:
        description: Compressor type used for attribute compression (enum)
        type: string
        enum: *COMPRESSOR
        example: "GZIP"
      compressor_level:
        description: Level setting for compression
        type: integer
        example: 3
      cell_val_num:
        description: Attribute number of values per cell
        type: integer
        example: 1
  Dimension:
    description: Dimension of array
    type: object
    required:
      - type
      - domain
      - null_tile_extent
    properties:
      name:
        description: Dimension name
        type: string
        example: "row"
      type:
        description: Datatype for Dimension
        type: string
        enum: *DATATYPE
        example: "INT32"
      domain:
        description: extent of domain
        type: array
        items:
          type: number
      null_tile_extent:
        description: Is tile extent null
        type: boolean
        example: true
      tile_extent:
        description: Extent of tile
        type: number
  Domain:
    description: Domain of array
    type: object
    required:
      - type
      - tile_order
      - cell_order
      - dimensions
    properties:
      type:
        description: Datatype of domain
        type: string
        enum: *DATATYPE
        example: "INT32"
      tile_order:
        description: Tile Order
        type: string
        enum: *LAYOUT
        example: row-major
      cell_order:
        description: Tile Order
        type: string
        enum: *LAYOUT
        example: col-major
      dimensions:
        type: array
        description: Array of dimensions
        items:
          $ref: "#/definitions/Dimension"
  ArraySchema:
    description: ArraySchema during creation or retrevial
    type: object
    required:
      - version
      - array_type
      - tile_order
      - cell_order
      - capacity
      - coords_compression
      - coords_compression_level
      - offset_compression
      - offset_compression_level
      - domain
      - attributes
    properties:
      uri:
        description: URI of schema
        type: string
        example: "s3://<bucket>/test_array"
      version:
        description: file format version
        type: array
        items:
          type: integer
        example: [1,3,0]
      array_type:
        description: Type of array
        type: string
        enum: *ARRAYTYPE
        example: sparse
      tile_order:
        description: Tile order setting of array
        type: string
        enum: *LAYOUT
        example: row-major
      cell_order:
        description: Order of cells
        type: string
        enum: *LAYOUT
        example: row-major
      capacity:
        description: Capacity of array
        type: integer
        format: uint64
        example: 100000
      coords_compression:
        description: Type of compression for coordinates (enum)
        type: string
        enum: *COMPRESSOR
        example: "GZIP"
      coords_compression_level:
        description: Level of coordinates compression
        type: integer
        example: 3
      offset_compression:
        description: Compression type of cell variable offsets (enum)
        type: string
        enum: *COMPRESSOR
        example: "GZIP"
      offset_compression_level:
        description: Compression level for cell variable offsets
        type: integer
        example: 3
      domain:
        description: Domain of array
        $ref: "#/definitions/Domain"
      attributes:
        description: Attributes of array
        type: array
        items:
          $ref: "#/definitions/Attribute"
  AttributeBuffer:
    description: Represents an attribute buffer
    type: object
    required:
      - buffer
    properties:
        buffer:
          description: value buffer
          type: object
        buffer_offset:
          description: offset buffer for variable length attributes
          type: object
  LastTile:
    description: last tile written
    type: object
    required:
      - type
      - compressor
      - compressor_level
      - cell_size
      - dim_num
      - buffer
    properties:
      type:
        type: string
        enum: *DATATYPE
        example: "INT32"
      compressor:
        description: Type of compression for buffer (enum)
        type: string
        enum: *COMPRESSOR
        example: "GZIP"
      compressor_level:
        description: Level of buffer compression
        type: integer
        example: 3
      cell_size:
        description: Size of cells for writting
        type: integer
        format: uint64
        example: "10"
      dim_num:
        description: number of dimensions
        type: integer
        format: uint64
        example: "10"
      buffer:
        description: buffer of data
        type: object
  LastTiles:
    type: array
    items:
      $ref: "#/definitions/LastTile"

  GlobalWriteState:
    description: state of global writes
    type: object
    required:
      - cells_written
      - last_tiles
    properties:
      last_tiles:
        description: last tiles written to disk
        type: object
        additionalProperties:
          $ref: "#/definitions/LastTiles"
      cells_written:
        description: Cells written so far in global write
        type: object
        additionalProperties:
          type: integer
          format: uint64
  Query:
    type: object
    required:
      - type
      - array_schema
      - buffers
      - layout
      - status
    properties:
      type:
        description: Type of query
        type: string
        enum: *QUERYTYPE
      layout:
        description: query write layout
        type: string
        enum: *LAYOUT
        example: row-major
      status:
        description: query status
        type: string
        enum: *QUERYSTATUS
        example: COMPLETED
      array_schema:
        description: Array Schema query is running on
        $ref: "#/definitions/ArraySchema"
      subarray:
        description: Limit dense operations to these dimensions
        type: object
      buffers:
        description: map of buffers
        type: object
        additionalProperties:
          $ref: "#/definitions/AttributeBuffer"
      writer:
        description: writer contains data needed for continuation of global write order queries
        type: object
        properties:
          global_write_state:
            $ref: "#/definitions/GlobalWriteState"
  Error:
    type:  object
    required:
      - message
      - code
    properties:
      code:
        type: integer
        format: int64
      message:
        type: string
paths:
  /arrays/group/{group}/project/{project}:
    parameters:
      - name: group
        in: path
        description: group name
        type: string
        required: true
      - name: project
        in: path
        description: project name
        type: string
        required: true
    get:
      description: get a all ArraySchemas give a given group/project
      tags:
        - array
      operationId: getArrays
      responses:
        200:
          description: get ArraySchema
          schema:
            type: array
            items:
              $ref: "#/definitions/ArraySchema"
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"
    post:
      description: create multiple array schemas in a group/project, reads uri from object
      tags:
        - array
      operationId: createArrays
      parameters:
        - name: ArraySchema
          in: body
          description: ArraySchema being created
          schema:
            type: array
            items:
              $ref: "#/definitions/ArraySchema"
          required: true
      responses:
        204:
          description: schema created successfully
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"

  /arrays/group/{group}/project/{project}/uri/{uri}:
    parameters:
      - name: group
        in: path
        description: group name
        type: string
        required: true
      - name: project
        in: path
        description: project name
        type: string
        required: true
      - name: uri
        in: path
        description: uri of array that is url-encoded
        type: string
        required: true
    delete:
      description: delete a array
      tags:
        - array
      operationId: deleteArray
      responses:
        204:
          description: delete array successful
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"
    get:
      description: get an ArraySchema using a url encoded uri
      tags:
        - array
      operationId: getArray
      responses:
        200:
          description: get ArraySchema
          schema:
            $ref: "#/definitions/ArraySchema"
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"
    post:
      description: create a array schema at a specified URI registered to a group/project
      tags:
        - array
      operationId: createArray
      parameters:
        - name: ArraySchema
          in: body
          description: ArraySchema being created
          schema:
            $ref: "#/definitions/ArraySchema"
          required: true
      responses:
        204:
          description: schema created successfully
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"
  /queries/group/{group}/project/{project}/uri/{uri}/submit:
    parameters:
      - name: group
        in: path
        description: group name
        type: string
        required: true
      - name: project
        in: path
        description: project name
        type: string
        required: true
      - name: uri
        in: path
        description: uri of array that is url-encoded
        type: string
        required: true
    post:
      description: send a query to run against a specified array/URI registered to a group/project
      tags:
        - query
      operationId: submitQuery
      parameters:
        - name: query
          in: body
          description: query to run
          schema:
            $ref: "#/definitions/Query"
          required: true
      responses:
        200:
          description: query completed and results are returned in query object
          schema:
            $ref: "#/definitions/Query"
        204:
          description: query completed successfully with no return
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"
  /queries/group/{group}/project/{project}/uri/{uri}/finalize:
    parameters:
      - name: group
        in: path
        description: group name
        type: string
        required: true
      - name: project
        in: path
        description: project name
        type: string
        required: true
      - name: uri
        in: path
        description: uri of array that is url-encoded
        type: string
        required: true
    post:
      description: send a query to run against a specified array/URI registered to a group/project
      tags:
        - query
      operationId: finalizeQuery
      parameters:
        - name: query
          in: body
          description: query to run
          schema:
            $ref: "#/definitions/Query"
          required: true
      responses:
        200:
          description: query completed and results are returned in query object
          schema:
            $ref: "#/definitions/Query"
        204:
          description: query completed successfully with no return
        default:
          description: error response
          schema:
            $ref: "#/definitions/Error"
